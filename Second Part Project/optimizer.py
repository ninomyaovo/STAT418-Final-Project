# -*- coding: utf-8 -*-
"""optimizer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nBTp_2tjTpiQUwi-_yCsrpIcz03-28Oi
"""

from __future__ import annotations

import functools
import pathlib
from typing import List, Set

import pandas as pd

# ---------------------------------------------------------------------
# 1.  Paths
# ---------------------------------------------------------------------
PKG_DIR   = pathlib.Path(__file__).parent          # …/second_part
DATA_DIR  = PKG_DIR / "data"
DATA_PATH = DATA_DIR / "pokemon.csv"

# ---------------------------------------------------------------------
# 2.  Data loader (cached per worker)
# ---------------------------------------------------------------------
@functools.lru_cache
def load_data() -> pd.DataFrame:
    """Return the cached Pokémon DataFrame (no external calls)."""
    df = pd.read_csv(DATA_PATH)

    # Ensure weaknesses column is a Python set for fast checks
    df["weaknesses"] = df["weaknesses"].fillna("").apply(
        lambda s: set(w.strip() for w in s.split(",") if w)
    )

    # Add total_stat if missing
    stat_cols = {
        "hp", "attack", "defense", "special-attack", "special-defense", "speed"
    }
    if "total_stat" not in df.columns and stat_cols.issubset(df.columns):
        df["total_stat"] = df[list(stat_cols)].sum(axis=1)

    # Add simple role label if missing
    if "role" not in df.columns:
        df["role"] = df.apply(_assign_role, axis=1)

    return df

# ---------------------------------------------------------------------
# 3.  Role classifier (same thresholds you used before)
# ---------------------------------------------------------------------
def _assign_role(p) -> str:
    hp, atk, df_, spatk, spdef, spd = (
        p["hp"],
        p["attack"],
        p["defense"],
        p["special-attack"],
        p["special-defense"],
        p["speed"],
    )

    if spd >= 100 and (atk >= 90 or spatk >= 90) and df_ < 75 and spdef < 75:
        return "Glass Cannon"
    if atk >= 90 and spd >= 85:
        return "Physical Sweeper"
    if spatk >= 90 and spd >= 85:
        return "Special Sweeper"
    if hp >= 90 and (df_ >= 85 or spdef >= 85):
        return "Tank"
    return "Support"


# ---------------------------------------------------------------------
# 4.  Greedy optimiser
# ---------------------------------------------------------------------
def optimise_team(
    starters: List[str] | None = None,
    hp_floor: int = 0,
    team_size: int = 6,
) -> pd.DataFrame:
    """
    Fill a team while minimising overlapping weaknesses.

    Parameters
    ----------
    starters  : list[str] of Title-case names already chosen by the user
    hp_floor  : minimum HP (slider)
    team_size : how many Pokémon to return (default 6)

    Returns
    -------
    pd.DataFrame of the chosen squad.
    """
    df = load_data()

    # 1 ▸ filter pool
    pool = df[df["hp"] >= hp_floor].copy()
    starters = [s.title() for s in (starters or [])]
    team = pool[pool["name"].isin(starters)].copy()
    pool = pool[~pool["name"].isin(starters)]

    # 2 ▸ greedy add Pokémon with fewest *new* weaknesses
    used_weak: Set[str] = set().union(*team["weaknesses"])

    while len(team) < team_size and not pool.empty:
        # marginal cost = number of EXTRA weaknesses introduced
        pool["marginal"] = pool["weaknesses"].apply(
            lambda w: len(w.difference(used_weak))
        )
        pick = pool.sort_values(["marginal", "total_stat"]).iloc[0:1]
        team = pd.concat([team, pick])
        used_weak.update(pick.iloc[0]["weaknesses"])
        pool = pool.drop(pick.index)

    team = team.drop(columns="marginal", errors="ignore")
    return team.reset_index(drop=True)


# ---------------------------------------------------------------------
# 5.  Quick CLI smoke-test
# ---------------------------------------------------------------------
if __name__ == "__main__":
    squad = optimise_team(starters=["Pikachu"], hp_floor=60)
    print(squad[["name", "role", "weaknesses"]])